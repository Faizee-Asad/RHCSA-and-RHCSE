For Windows

1. Install Docker Desktop (& Login)

2. Install nodejs (for runing react app) & Install VS Code (For writing the code)

# Demo Project 

after that open VS code and open terminal inside vs.
> node -v
> npx create-react-app testapp
> cd testapp
> npm start

Delete the node_modules folder cuz it has depedencies the file size is so big and upload to github.
clone and run
> cd testapp
> npm install
> npm start

# Creating Dockerfile
Let's make a docker image file 

Create a file inside the testapp (Dockerfile)
Install Docker Extention in VScode.

Dockerfile Content

```
FROM node:22 
# base image file get from hub.docker.com
# Which application we need and which version we want.
# make folder in the empty container
WORKDIR /myapp
# Copy our project file into containter
COPY . .
# install dependencies
RUN npm install
# Optional by defaults node app run 3000
EXPOSE 3000 
# RUN npm start
CMD [ "nmp", "start" ]
```

# Now lets create docker image using Dockerfile

# command to build dockerfile to image
> docker build .

# command to check list of image
> docker image ls

# Dockerfile is a simple text file with instructions to build an image.
# Image: Single file with all the dep and lib to run the program.

# run a image file in multiple container (isolated environment)

# run docker image (file run successfully inside the container)
> docker run IMAGEID

# http://localhost:3000 it not working cuz you are not inside the container you are in windows environmnet we need to bind the port.

# use in diff terminal with same path
# stop the running
> docker ps
> docker stop NAMES

# port binding
> docker run -p 3000:3000 IMAGEID

# running container in Detached mode (run container in background)
> docker run -d -p 3000:3000 IMAGEID

# runnig multple container from a single image.
> docker run -d -p 3001:3000 IMAGEID
> docker run -d -p 3002:3000 IMAGEID

# see all the container 
> docker ps -a

# remove container
> docker rm NAMES

# run and rm when we stop the container
> docker run -d --rm -p 3002:3000 IMAGEID

# Assign container name
> docker run -d --rm --name "myapp" -p 3002:3000 IMAGEID


# Image management

> docker image ls
> docker build .
> docker build -t mywebapp:01 .
> docker build -t mywebapp:02 .

> docker rmi mywebapp:01
> docker rmi IAMGEID

# What if we update the project

just run dont change anything in dockerfile just update code and run this. create image and run the container
> docker build -t mywebapp:02 .
> docker run -d --rm --name "myapp" -p 3002:3000 mywebapp:02

_____________________________________________________________________________________________________________________